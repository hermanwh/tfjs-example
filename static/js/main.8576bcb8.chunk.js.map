{"version":3,"sources":["AddSensor.js","utils.js","App.js","reportWebVitals.js","index.js"],"names":["addSensorFunc","sensor","type","sensorConfig","setFunc","config","obj","name","Object","keys","sensors","forEach","x","push","AddSensor","props","useState","inputSensor","setInputSensor","outputSensor","setOutputSensor","internalSensor","setInternalSensor","changeSensor","number","func","Checkbox","color","onClick","checked","getR2Score","predict","data","map","Number","meanValue","SStot","SSres","n","length","m","Math","pow","rSquared","convertToTensors","x_train","x_test","y_train","y_test","tensors","trainFeatures","tf","trainTargets","testFeatures","testTargets","preprocess","modelParams","newData","headers","slice","values","index","result","key","i","refactorRawData","dataset","inputs","input","targets","output","features","dataRow","row","inputName","getFeatureTargetSplit","shuffle","shuffleData","filter","some","y","preprocessRemoveEmptyAndNull","test_train_split","numberOfRows","numberOfTrain","round","getTestTrainSplit","getSequentialModel","numberOfUnits","inputSize","outputSize","activation","outputActivation","model","layerUnits","add","dense","kernelRegularizer","L1L2","units","inputShape","batchSize","validation_split","learningRate","epochs","optimizer","adam","loss","min_R2_score","max_iterations","App","dataPoints","setDataPoints","sensorNames","setSensorNames","setHasSelectedDataset","setSensorConfig","R2","setR2","hasTrained","setHasTrained","setIsTraining","processedData","setProcessedData","setTrainedModel","trainModel","a","fitModel","arraySync","xTrain","yTrain","shape","console","log","summary","compile","lossContainer","document","getElementById","callbacks","tfvis","fitCallbacks","fit","validationSplit","className","cssClass","onFileLoaded","id","toFixed","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"+ZAIO,SAASA,EAAcC,EAAQC,EAAMC,EAAcC,GACxD,IAAIC,EAAS,GACTC,EAAG,eACJL,EAAS,CACRM,KAAMN,EACNC,KAAMA,IAGVG,EAAM,QACa,OAAjBF,EAAA,2BAA6BA,EAAY,SAAgBG,GAAQ,GACnED,EAAM,MAAY,GAClBA,EAAM,OAAa,GACnBA,EAAM,SAAe,GACrBG,OAAOC,KAAKJ,EAAOK,SAASC,SAAQ,SAAAC,GAAC,OACnCP,EAAOA,EAAOK,QAAQE,GAAGV,MAAMW,KAAKR,EAAOK,QAAQE,GAAGL,SAExDH,EAAQC,GAGH,IAAMS,EAAY,SAAAC,GAAU,IAAD,EACMC,oBAAS,GADf,mBACzBC,EADyB,KACZC,EADY,OAEQF,oBAAS,GAFjB,mBAEzBG,EAFyB,KAEXC,EAFW,OAGYJ,oBAAS,GAHrB,mBAGzBK,EAHyB,KAGTC,EAHS,KAK1BC,EAAe,SAAAC,GACnB,OAAQA,GACN,KAAK,EACHN,GAAe,GACfE,GAAgB,GAChBE,GAAkB,GAClBP,EAAMU,KAAKV,EAAMd,OAAQ,QAASc,EAAMZ,aAAcY,EAAMX,SAE5D,MACF,KAAK,EACHgB,GAAgB,GAChBF,GAAe,GACfI,GAAkB,GAClBP,EAAMU,KAAKV,EAAMd,OAAQ,SAAUc,EAAMZ,aAAcY,EAAMX,SAE7D,MACF,KAAK,EACHkB,GAAkB,GAClBF,GAAgB,GAChBF,GAAe,GACfH,EAAMU,KAAKV,EAAMd,OAAQ,WAAYc,EAAMZ,aAAcY,EAAMX,WAQrE,OACE,+BACE,6BACE,4BAAIW,EAAMd,WAEZ,6BACE,cAACyB,EAAA,EAAD,CACEC,MAAM,UACNC,QAAS,kBAAML,EAAa,IAC5BM,QAASZ,MAGb,6BACE,cAACS,EAAA,EAAD,CACEC,MAAM,UACNC,QAAS,kBAAML,EAAa,IAC5BM,QAASV,MAGb,6BACE,cAACO,EAAA,EAAD,CACEC,MAAM,UACNC,QAAS,kBAAML,EAAa,IAC5BM,QAASR,U,0BCAZ,SAASS,EAAWC,EAASC,GAClCA,EAAOA,EAAKC,KAAI,SAAArB,GAAC,OAAIsB,OAAOtB,MAC5BmB,EAAUA,EAAQE,KAAI,SAAArB,GAAC,OAAIsB,OAAOtB,MAOlC,IALA,IAAIuB,EAAY,EACZC,EAAQ,EACRC,EAAQ,EAGHC,EAAI,EAAGA,EAAIN,EAAKO,OAAQD,IAC/BH,GAAaH,EAAKM,GAEpBH,GAAwBH,EAAKO,OAE7B,IAAK,IAAIC,EAAI,EAAGA,EAAIR,EAAKO,OAAQC,IAC/BJ,GAASK,KAAKC,IAAIV,EAAKQ,GAAKL,EAAW,GACvCE,GAASI,KAAKC,IAAIX,EAAQS,GAAKR,EAAKQ,GAAI,GAK1C,MAAO,CACLL,UAAWA,EACXC,MAAOA,EACPC,MAAOA,EACPM,SANS,EAAIN,EAAQD,GA6ClB,SAASQ,EAAiBC,EAASC,EAAQC,EAASC,GACzD,IAAMC,EAAU,GAKhB,OAJAA,EAAQC,cAAgBC,WAAYN,GACpCI,EAAQG,aAAeD,WAAYJ,GACnCE,EAAQI,aAAeF,WAAYL,GACnCG,EAAQK,YAAcH,WAAYH,GAC3BC,EAGF,SAASM,EAAWvB,EAAM7B,EAAcqD,GAC7C,IAAIC,EAOC,SAAyBzB,GAC9B,IAAIyB,EAAU,GACRC,EAAU1B,EAAK,GAMrB,OALAA,EAAK2B,MAAM,GAAI,GAAGhD,SAAQ,SAASiD,EAAQC,GACzC,IAAIC,EAAS,GACbJ,EAAQ/C,SAAQ,SAACoD,EAAKC,GAAN,OAAaF,EAAOC,GAAOH,EAAOI,MAClDP,EAAQ5C,KAAKiD,MAERL,EAfOQ,CAAgBjC,GAD4B,EAnCrD,SAA+BkC,EAAS7D,GAC7C,IAAM8D,EAAS9D,EAAO+D,MAChBC,EAAUH,EAAQjC,KAAI,SAAArB,GAAC,MAAI,CAACsB,OAAOtB,EAAEP,EAAOiE,OAAO,SACrDC,EAAW,GAQf,OAPAL,EAAQvD,SAAQ,SAAS6D,GACvB,IAAIC,EAAM,GACVN,EAAOxD,SAAQ,SAAS+D,GACtBD,EAAI5D,KAAKqB,OAAOsC,EAAQE,QAE1BH,EAAS1D,KAAK4D,MAET,CAACF,EAAUF,GA4BQM,CAD1BlB,EA/CK,SAAqBzB,GAC1B,OAAO4C,kBAAQ5C,GA8CL6C,CADVpB,EA1CK,SAAsCzB,GAE3C,OADOA,EAAK8C,QAAO,SAAAlE,GAAC,OAAKJ,OAAOoD,OAAOhD,GAAGmE,MAAK,SAAAC,GAAC,MAAU,KAANA,GAAiB,MAALA,QAyCtDC,CAA6BxB,IAEkBtD,GAJC,mBAK1D,OA1BK,SAA2BoE,EAAUF,EAASa,GACnD,IAAMC,EAAeZ,EAAShC,OAExB6C,EAAgBD,EADD1C,KAAK4C,MAAMF,EAAeD,GAO/C,MAAO,CAJSX,EAASZ,MAAM,EAAGyB,EAAgB,GACnCb,EAASZ,MAAMyB,EAAgB,GAC9Bf,EAAQV,MAAM,EAAGyB,EAAgB,GAClCf,EAAQV,MAAMyB,EAAgB,IAkBtCE,CALmD,UAKd9B,EAAY0B,kBAcnD,SAASK,EACdC,EACAC,EACAC,EACAC,EACAC,GAEA,IAAMC,EAAQ1C,eAcd,OAbAqC,EAAc7E,SAAQ,SAAAmF,GACpBD,EAAME,IACJ5C,SAAU6C,MAAM,CACdC,kBAAmB9C,eAAgB+C,KACnCC,MAAOL,EACPH,WAAYA,EACZS,WAAY,CAACX,SAInBI,EAAME,IACJ5C,SAAU6C,MAAM,CAAEG,MAAOT,EAAYC,WAAYC,KAE5CC,EAGMjD,ICpLTY,EAAc,CAClB6C,UAAW,IACXnB,iBAAkB,GAClBoB,iBAAkB,GAClBC,aAAc,IACdC,OAAQ,IACRC,UAAWtD,QAASuD,KAAK,KACzBC,KAAM,oBACNC,aAAc,GACdC,eAAgB,GA8IHC,MA3If,WAAgB,IAAD,EACuB9F,mBAAS,MADhC,mBACN+F,EADM,KACMC,EADN,OAEyBhG,mBAAS,MAFlC,mBAENiG,EAFM,KAEOC,EAFP,OAGuClG,oBAAS,GAHhD,mBAGcmG,GAHd,aAI2BnG,mBAAS,MAJpC,mBAINb,EAJM,KAIQiH,EAJR,OAMOpG,oBAAU,KANjB,mBAMNqG,EANM,KAMFC,EANE,OAOuBtG,oBAAS,GAPhC,mBAONuG,EAPM,KAOMC,EAPN,OASuBxG,oBAAS,GAThC,mBASMyG,GATN,aAW6BzG,mBAAS,IAXtC,mBAWN0G,EAXM,KAWSC,EAXT,OAY2B3G,mBAAS,MAZpC,mBAYQ4G,GAZR,oBAoBEC,EApBF,oFAoBb,WAA0BhF,EAASC,EAAQC,EAASC,GAApD,iBAAA8E,EAAA,6DACEL,GAAc,GAERxE,EAAUL,EAAiBC,EAASC,EAAQC,EAASC,GAH7D,SAKoB+E,EAAS9E,EAAQC,cAAeD,EAAQG,cAL5D,OAKMyC,EALN,OAME+B,EAAgB/B,GAChByB,EACExF,EAAW+D,EAAM9D,QAAQkB,EAAQI,cAAc2E,YAAahF,GACzDL,UAGL6E,GAAc,GACdC,GAAc,GAbhB,4CApBa,+BAoCEM,EApCF,gFAoCb,WAAwBE,EAAQC,GAAhC,mBAAAJ,EAAA,6DACMjC,EAAQN,EACV,CAAC,KACD0C,EAAOE,MAAM,GACbD,EAAOC,MAAM,GACb,OACA,UAGFC,QAAQC,IAAI,SAAUxC,EAAMyC,WAE5BzC,EAAMyC,UACNzC,EAAM0C,QAAQ,CACZ9B,UAAWjD,EAAYiD,UACvBE,KAAMnD,EAAYmD,OAGd6B,EAAgBC,SAASC,eAAe,cACxCC,EAAYC,OAAWC,aAC3BL,EACA,CAAC,OAAQ,YACT,CACEG,UAAW,CAAC,aAAc,gBAtBhC,SAyBQ9C,EAAMiD,IAAIb,EAAQC,EAAQ,CAC9B7B,UAAW7C,EAAY6C,UACvBG,OAAQhD,EAAYgD,OACpBuC,gBAAiBvF,EAAY8C,iBAC7BqC,UAAWA,IA7Bf,gCA+BS9C,GA/BT,4CApCa,kEAsEb,sCAAAiC,EAAA,wDAC6CvE,EACzCwD,EACA5G,EACAqD,GAJJ,mBACSX,EADT,KACkBC,EADlB,KAC0BC,EAD1B,KACmCC,EADnC,KAME2E,EAAiB,CAAC9E,EAASC,EAAQC,EAASC,IAC5C6E,EAAWhF,EAASC,EAAQC,EAASC,GAPvC,4CAtEa,sBAgFb,OACE,sBAAKgG,UAAU,MAAf,UACE,sBAAKA,UAAU,OAAf,UACE,sEACA,cAAC,IAAD,CAAWC,SAAS,kBAAkBC,aAtEtB,SAAAlH,GACpBmF,GAAsB,GACtBH,EAAchF,GACdkF,EAAelF,EAAK,UAsElB,sBAAKgH,UAAU,OAAf,UACE,kEACgB,MAAf/B,GACC,gCACE,kCACE,+BACE,oBAAI+B,UAAU,aAAd,yBACA,oBAAIA,UAAU,aAAd,mBACA,oBAAIA,UAAU,aAAd,oBACA,oBAAIA,UAAU,aAAd,wBAED/B,GACCA,EAAYhF,KAAI,SAAAhC,GAAM,OACpB,cAAC,EAAD,CAEEA,OAAQA,EACRwB,KAAMzB,EACNG,aAAcA,EACdC,QAASgH,GAJJnH,cAYnB,sBAAK+I,UAAU,OAAf,UACE,oDACA,wBAAQA,UAAU,kBAAkBpH,QAnH7B,2CAmHP,iCAIA,gCACE,sCACA,qBAAKoH,UAAU,WAAWG,GAAG,kBAE9B5B,GACC,gCACE,kDAAqBF,EAAG+B,QAAQ,MAChC,wBACEJ,UAAU,cACVpH,QAAS,kBAAMiG,EAAU,WAAV,cAAcH,KAF/B,qCC7IG2B,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFvB,SAASC,eAAe,SAM1BW,M","file":"static/js/main.8576bcb8.chunk.js","sourcesContent":["import React, { useState } from \"react\";\n\nimport { Checkbox } from \"@material-ui/core\";\n\nexport function addSensorFunc(sensor, type, sensorConfig, setFunc) {\n  let config = [];\n  let obj = {\n    [sensor]: {\n      name: sensor,\n      type: type\n    }\n  };\n  config[\"sensors\"] =\n    sensorConfig !== null ? { ...sensorConfig[\"sensors\"], ...obj } : [];\n  config[\"input\"] = [];\n  config[\"output\"] = [];\n  config[\"internal\"] = [];\n  Object.keys(config.sensors).forEach(x =>\n    config[config.sensors[x].type].push(config.sensors[x].name)\n  );\n  setFunc(config);\n}\n\nexport const AddSensor = props => {\n  const [inputSensor, setInputSensor] = useState(false);\n  const [outputSensor, setOutputSensor] = useState(false);\n  const [internalSensor, setInternalSensor] = useState(false);\n\n  const changeSensor = number => {\n    switch (number) {\n      case 0:\n        setInputSensor(true);\n        setOutputSensor(false);\n        setInternalSensor(false);\n        props.func(props.sensor, \"input\", props.sensorConfig, props.setFunc);\n        // save something to store here?\n        break;\n      case 1:\n        setOutputSensor(true);\n        setInputSensor(false);\n        setInternalSensor(false);\n        props.func(props.sensor, \"output\", props.sensorConfig, props.setFunc);\n        // save something to store here?\n        break;\n      case 2:\n        setInternalSensor(true);\n        setOutputSensor(false);\n        setInputSensor(false);\n        props.func(props.sensor, \"internal\", props.sensorConfig, props.setFunc);\n        // save something to store here?\n        break;\n      default:\n        break;\n    }\n  };\n\n  return (\n    <tr>\n      <td>\n        <p>{props.sensor}</p>\n      </td>\n      <td>\n        <Checkbox\n          color=\"default\"\n          onClick={() => changeSensor(0)}\n          checked={inputSensor}\n        />\n      </td>\n      <td>\n        <Checkbox\n          color=\"default\"\n          onClick={() => changeSensor(1)}\n          checked={outputSensor}\n        />\n      </td>\n      <td>\n        <Checkbox\n          color=\"default\"\n          onClick={() => changeSensor(2)}\n          checked={internalSensor}\n        />\n      </td>\n    </tr>\n  );\n};\n\nexport default AddSensor;\n","import * as tf from \"@tensorflow/tfjs\";\n\nimport {\n  shuffle,\n  max,\n  min,\n  mean,\n  standardDeviation,\n  sampleCorrelation\n} from \"simple-statistics\";\n\nexport function getDatasetByColumns(dataset) {\n  const numberOfColumns = dataset[0].length;\n  const columnsData = [];\n  for (var i = 0; i < numberOfColumns; i++) {\n    const column = dataset.map(x => x[i]);\n    columnsData.push(column);\n  }\n  return columnsData;\n}\n\nexport function getCovarianceMatrix(dataset) {\n  const columnData = getDatasetByColumns(dataset);\n  const numberOfColumns = columnData.length;\n  const covariances = [];\n  for (var i = 0; i < numberOfColumns; i++) {\n    const covariances_column_i = [];\n    for (var j = 0; j < numberOfColumns; j++) {\n      covariances_column_i.push(\n        sampleCorrelation(columnData[i], columnData[j])\n      );\n    }\n    covariances.push(covariances_column_i);\n  }\n  return covariances;\n}\n\nexport function standardizeData(data) {\n  const numberOfColumns = data[0].length;\n  const numberOfRows = data.length;\n  let meanvals = [];\n  let stdvals = [];\n  for (var k = 0; k < numberOfColumns; k++) {\n    const col = data.map(x => x[k]);\n    meanvals.push(mean(col));\n    stdvals.push(standardDeviation(col));\n  }\n  const standardized = [];\n  for (var i = 0; i < numberOfRows; i++) {\n    const row = [];\n    for (var j = 0; j < numberOfColumns; j++) {\n      row.push((data[i][j] - meanvals[j]) / stdvals[j]);\n    }\n    standardized.push(row);\n  }\n  return standardized;\n}\n\nexport function normalizeData(data) {\n  const numberOfColumns = data[0].length;\n  const numberOfRows = data.length;\n  let maxvals = [];\n  let minvals = [];\n  for (var k = 0; k < numberOfColumns; k++) {\n    const col = data.map(x => x[k]);\n    maxvals.push(max(col));\n    minvals.push(min(col));\n  }\n  const normalized = [];\n  for (var i = 0; i < numberOfRows; i++) {\n    const row = [];\n    for (var j = 0; j < numberOfColumns; j++) {\n      row.push((data[i][j] - minvals[j]) / (maxvals[j] - minvals[j]));\n    }\n    normalized.push(row);\n  }\n  return normalized;\n}\n\nexport function getR2Score(predict, data) {\n  data = data.map(x => Number(x));\n  predict = predict.map(x => Number(x));\n\n  var meanValue = 0;\n  var SStot = 0;\n  var SSres = 0;\n  var rSquared = 0;\n\n  for (var n = 0; n < data.length; n++) {\n    meanValue += data[n];\n  }\n  meanValue = meanValue / data.length;\n\n  for (var m = 0; m < data.length; m++) {\n    SStot += Math.pow(data[m] - meanValue, 2);\n    SSres += Math.pow(predict[m] - data[m], 2);\n  }\n\n  rSquared = 1 - SSres / SStot;\n\n  return {\n    meanValue: meanValue,\n    SStot: SStot,\n    SSres: SSres,\n    rSquared: rSquared\n  };\n}\n\nexport function shuffleData(data) {\n  return shuffle(data);\n}\n\nexport function preprocessRemoveEmptyAndNull(data) {\n  data = data.filter(x => !Object.values(x).some(y => y === \"\" || y == null));\n  return data;\n}\n\nexport function getFeatureTargetSplit(dataset, config) {\n  const inputs = config.input;\n  const targets = dataset.map(x => [Number(x[config.output[0]])]);\n  let features = [];\n  dataset.forEach(function(dataRow) {\n    let row = [];\n    inputs.forEach(function(inputName) {\n      row.push(Number(dataRow[inputName]));\n    });\n    features.push(row);\n  });\n  return [features, targets];\n}\n\nexport function getTestTrainSplit(features, targets, test_train_split) {\n  const numberOfRows = features.length;\n  const numberOfTest = Math.round(numberOfRows * test_train_split);\n  const numberOfTrain = numberOfRows - numberOfTest;\n\n  const x_train = features.slice(0, numberOfTrain - 1);\n  const x_test = features.slice(numberOfTrain - 1);\n  const y_train = targets.slice(0, numberOfTrain - 1);\n  const y_test = targets.slice(numberOfTrain - 1);\n  return [x_train, x_test, y_train, y_test];\n}\n\nexport function convertToTensors(x_train, x_test, y_train, y_test) {\n  const tensors = {};\n  tensors.trainFeatures = tf.tensor2d(x_train);\n  tensors.trainTargets = tf.tensor2d(y_train);\n  tensors.testFeatures = tf.tensor2d(x_test);\n  tensors.testTargets = tf.tensor2d(y_test);\n  return tensors;\n}\n\nexport function preprocess(data, sensorConfig, modelParams) {\n  let newData = refactorRawData(data);\n  newData = preprocessRemoveEmptyAndNull(newData);\n  newData = shuffleData(newData);\n  let [features, targets] = getFeatureTargetSplit(newData, sensorConfig);\n  return getTestTrainSplit(features, targets, modelParams.test_train_split);\n}\n\nexport function refactorRawData(data) {\n  let newData = [];\n  const headers = data[0];\n  data.slice(1, -1).forEach(function(values, index) {\n    let result = {};\n    headers.forEach((key, i) => (result[key] = values[i]));\n    newData.push(result);\n  });\n  return newData;\n}\n\nexport function getSequentialModel(\n  numberOfUnits,\n  inputSize,\n  outputSize,\n  activation,\n  outputActivation\n) {\n  const model = tf.sequential();\n  numberOfUnits.forEach(layerUnits => {\n    model.add(\n      tf.layers.dense({\n        kernelRegularizer: tf.regularizers.L1L2,\n        units: layerUnits,\n        activation: activation,\n        inputShape: [inputSize]\n      })\n    );\n  });\n  model.add(\n    tf.layers.dense({ units: outputSize, activation: outputActivation })\n  );\n  return model;\n}\n\nexport default convertToTensors;\n","import \"./App.css\";\nimport React, { useState } from \"react\";\nimport CSVReader from \"react-csv-reader\";\nimport { AddSensor, addSensorFunc } from \"./AddSensor.js\";\n\nimport * as tf from \"@tensorflow/tfjs\";\nimport * as tfvis from \"@tensorflow/tfjs-vis\";\n\nimport {\n  convertToTensors,\n  getR2Score,\n  preprocess,\n  getSequentialModel\n} from \"./utils.js\";\n\nconst modelParams = {\n  batchSize: 128 * 2 * 2,\n  test_train_split: 0.2,\n  validation_split: 0.2,\n  learningRate: 0.01,\n  epochs: 200,\n  optimizer: tf.train.adam(0.01),\n  loss: \"meanAbsoluteError\",\n  min_R2_score: 0.5,\n  max_iterations: 4\n};\n\nfunction App() {\n  const [dataPoints, setDataPoints] = useState(null);\n  const [sensorNames, setSensorNames] = useState(null);\n  const [hasSelectedDataset, setHasSelectedDataset] = useState(false);\n  const [sensorConfig, setSensorConfig] = useState(null);\n\n  const [R2, setR2] = useState(-1000);\n  const [hasTrained, setHasTrained] = useState(false);\n\n  const [isTraining, setIsTraining] = useState(false);\n\n  const [processedData, setProcessedData] = useState([]);\n  const [trainedModel, setTrainedModel] = useState(null);\n\n  const selectDataset = data => {\n    setHasSelectedDataset(true);\n    setDataPoints(data);\n    setSensorNames(data[0]);\n  };\n\n  async function trainModel(x_train, x_test, y_train, y_test) {\n    setIsTraining(true);\n\n    const tensors = convertToTensors(x_train, x_test, y_train, y_test);\n\n    let model = await fitModel(tensors.trainFeatures, tensors.trainTargets);\n    setTrainedModel(model);\n    setR2(\n      getR2Score(model.predict(tensors.testFeatures).arraySync(), y_test)\n        .rSquared\n    );\n\n    setHasTrained(true);\n    setIsTraining(false);\n  }\n\n  async function fitModel(xTrain, yTrain) {\n    let model = getSequentialModel(\n      [128],\n      xTrain.shape[1],\n      yTrain.shape[1],\n      \"relu\",\n      \"linear\"\n    );\n\n    console.log(\"Model:\", model.summary());\n\n    model.summary();\n    model.compile({\n      optimizer: modelParams.optimizer,\n      loss: modelParams.loss\n    });\n\n    const lossContainer = document.getElementById(\"lossCanvas\");\n    const callbacks = tfvis.show.fitCallbacks(\n      lossContainer,\n      [\"loss\", \"val_loss\"],\n      {\n        callbacks: [\"onEpochEnd\", \"onBatchEnd\"]\n      }\n    );\n    await model.fit(xTrain, yTrain, {\n      batchSize: modelParams.batchSize,\n      epochs: modelParams.epochs,\n      validationSplit: modelParams.validation_split,\n      callbacks: callbacks\n    });\n    return model;\n  }\n\n  async function performModelTraining() {\n    const [x_train, x_test, y_train, y_test] = preprocess(\n      dataPoints,\n      sensorConfig,\n      modelParams\n    );\n    setProcessedData([x_train, x_test, y_train, y_test]);\n    trainModel(x_train, x_test, y_train, y_test);\n  }\n\n  return (\n    <div className=\"App\">\n      <div className=\"step\">\n        <p>Step 1: Upload dataset in .csv format</p>\n        <CSVReader cssClass=\"react-csv-input\" onFileLoaded={selectDataset} />\n      </div>\n\n      <div className=\"step\">\n        <p>Step 2: Choose values for sensors</p>\n        {sensorNames != null && (\n          <table>\n            <tbody>\n              <tr>\n                <th className=\"TableField\">Sensor name</th>\n                <th className=\"TableField\">Input</th>\n                <th className=\"TableField\">Output</th>\n                <th className=\"TableField\">Exclude</th>\n              </tr>\n              {sensorNames &&\n                sensorNames.map(sensor => (\n                  <AddSensor\n                    key={sensor}\n                    sensor={sensor}\n                    func={addSensorFunc}\n                    sensorConfig={sensorConfig}\n                    setFunc={setSensorConfig}\n                  />\n                ))}\n            </tbody>\n          </table>\n        )}\n      </div>\n\n      <div className=\"step\">\n        <p>Step 3: Train model</p>\n        <button className=\"react-csv-input\" onClick={performModelTraining}>\n          Init model training\n        </button>\n\n        <div>\n          <h4>Loss</h4>\n          <div className=\"canvases\" id=\"lossCanvas\"></div>\n        </div>\n        {hasTrained && (\n          <div>\n            <p>R-squared score: {R2.toFixed(5)}</p>\n            <button\n              className=\"buttonStyle\"\n              onClick={() => trainModel(...processedData)}\n            >\n              Retrain model\n            </button>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}
{"version":3,"sources":["AddSensor.js","utils.js","App.js","reportWebVitals.js","index.js"],"names":["addSensorFunc","sensor","type","sensorConfig","setFunc","config","obj","name","Object","keys","sensors","forEach","x","push","AddSensor","props","useState","inputSensor","setInputSensor","outputSensor","setOutputSensor","internalSensor","setInternalSensor","changeSensor","number","func","Checkbox","color","onClick","checked","getR2Score","predict","data","SSres_tot","SStot_tot","i","d","map","Number","p","SStot","SSres","meanValue","reduce","pv","cv","length","m","Math","pow","rSquared","convertToTensors","x_train","x_test","y_train","y_test","tensors","trainFeatures","tf","trainTargets","testFeatures","testTargets","preprocess","modelParams","newData","headers","slice","values","index","result","key","refactorRawData","filter","some","y","preprocessRemoveEmptyAndNull","dataset","inputs","input","outputs","output","features","targets","dataRow","featureRow","inputName","targetRow","outputName","getFeatureTargetSplit","shuffle","test_train_split","numberOfRows","numberOfTrain","round","getTestTrainSplit","batchSize","validation_split","learningRate","epochs","App","step","setStep","dataPoints","setDataPoints","sensorNames","setSensorNames","setSensorConfig","R2","setR2","hasTrained","setHasTrained","isTraining","setIsTraining","processedData","setProcessedData","trainedModel","setTrainedModel","csvError","setCsvError","setEpochs","batchsize","setBatchsize","setSensorConfigWithStateReset","args","resetState","lossContainer","document","getElementById","firstChild","removeChild","lastChild","resetLossContainer","trainModel","a","fitModel","model","arraySync","getSequentialModel","numberOfUnits","inputSize","outputSize","activation","outputActivation","add","dense","kernelRegularizer","L1L2","units","inputShape","layerUnits","xTrain","yTrain","shape","summary","compile","optimizer","adam","loss","callbacks","tfvis","fitCallbacks","fit","validationSplit","mainRef","useRef","useEffect","current","scrollIntoView","behavior","block","inline","className","ref","style","marginBottom","href","target","rel","cssClass","onFileLoaded","onError","paddingTop","id","toFixed","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.d90e67a9.chunk.js","sourcesContent":["import React, { useState } from \"react\";\n\nimport { Checkbox } from \"@material-ui/core\";\n\nexport function addSensorFunc(sensor, type, sensorConfig, setFunc) {\n  let config = [];\n  let obj = {\n    [sensor]: {\n      name: sensor,\n      type: type\n    }\n  };\n  config[\"sensors\"] =\n    sensorConfig !== null ? { ...sensorConfig[\"sensors\"], ...obj } : { ...obj };\n  config[\"input\"] = [];\n  config[\"output\"] = [];\n  config[\"internal\"] = [];\n  Object.keys(config.sensors).forEach(x =>\n    config[config.sensors[x].type].push(config.sensors[x].name)\n  );\n  setFunc(config);\n}\n\nexport const AddSensor = props => {\n  const [inputSensor, setInputSensor] = useState(false);\n  const [outputSensor, setOutputSensor] = useState(false);\n  const [internalSensor, setInternalSensor] = useState(false);\n\n  const changeSensor = number => {\n    switch (number) {\n      case 0:\n        setInputSensor(true);\n        setOutputSensor(false);\n        setInternalSensor(false);\n        props.func(props.sensor, \"input\", props.sensorConfig, props.setFunc);\n        break;\n      case 1:\n        setOutputSensor(true);\n        setInputSensor(false);\n        setInternalSensor(false);\n        props.func(props.sensor, \"output\", props.sensorConfig, props.setFunc);\n        break;\n      case 2:\n        setInternalSensor(true);\n        setOutputSensor(false);\n        setInputSensor(false);\n        props.func(props.sensor, \"internal\", props.sensorConfig, props.setFunc);\n        break;\n      default:\n        break;\n    }\n  };\n\n  return (\n    <tr>\n      <td>\n        <p>{props.sensor}</p>\n      </td>\n      <td>\n        <Checkbox\n          color=\"default\"\n          onClick={() => changeSensor(0)}\n          checked={inputSensor}\n        />\n      </td>\n      <td>\n        <Checkbox\n          color=\"default\"\n          onClick={() => changeSensor(1)}\n          checked={outputSensor}\n        />\n      </td>\n      <td>\n        <Checkbox\n          color=\"default\"\n          onClick={() => changeSensor(2)}\n          checked={internalSensor}\n        />\n      </td>\n    </tr>\n  );\n};\n\nexport default AddSensor;\n","import * as tf from \"@tensorflow/tfjs\";\n\nimport { shuffle } from \"simple-statistics\";\n\n// Because the data from our react-csv-reader as a rather strange format,\n// we have to parse it a bit before it can be\nexport function getDatasetByColumns(dataset) {\n  const numberOfColumns = dataset[0].length;\n  const columnsData = [];\n  for (var i = 0; i < numberOfColumns; i++) {\n    const column = dataset.map(x => x[i]);\n    columnsData.push(column);\n  }\n  return columnsData;\n}\n\nexport function getR2Score(predict, data) {\n  let SSres_tot = 0;\n  let SStot_tot = 0;\n  for (let i = 0; i < data[0].length; i++) {\n    let d = data.map(x => Number(x[i]));\n    let p = predict.map(x => Number(x[i]));\n\n    let SStot = 0;\n    let SSres = 0;\n\n    const meanValue =\n      d.reduce(function(pv, cv) {\n        return pv + cv;\n      }, 0) / d.length;\n\n    for (let m = 0; m < d.length; m++) {\n      SStot += Math.pow(d[m] - meanValue, 2);\n      SSres += Math.pow(p[m] - d[m], 2);\n    }\n\n    SSres_tot += SSres;\n    SStot_tot += SStot;\n  }\n\n  let rSquared = 1 - SSres_tot / SStot_tot;\n\n  return {\n    SStot: SSres_tot,\n    SSres: SStot_tot,\n    rSquared: rSquared\n  };\n}\n\nexport function preprocessRemoveEmptyAndNull(data) {\n  data = data.filter(x => !Object.values(x).some(y => y === \"\" || y == null));\n  return data;\n}\n\nexport function getFeatureTargetSplit(dataset, config) {\n  const inputs = config.input;\n  const outputs = config.output;\n  let features = [];\n  let targets = [];\n  dataset.forEach(function(dataRow) {\n    let featureRow = [];\n    inputs.forEach(function(inputName) {\n      featureRow.push(Number(dataRow[inputName]));\n    });\n    features.push(featureRow);\n\n    let targetRow = [];\n    outputs.forEach(function(outputName) {\n      targetRow.push(Number(dataRow[outputName]));\n    });\n    targets.push(targetRow);\n  });\n  return [features, targets];\n}\n\nexport function getTestTrainSplit(features, targets, test_train_split) {\n  const numberOfRows = features.length;\n  const numberOfTest = Math.round(numberOfRows * test_train_split);\n  const numberOfTrain = numberOfRows - numberOfTest;\n\n  const x_train = features.slice(0, numberOfTrain - 1);\n  const x_test = features.slice(numberOfTrain - 1);\n  const y_train = targets.slice(0, numberOfTrain - 1);\n  const y_test = targets.slice(numberOfTrain - 1);\n  return [x_train, x_test, y_train, y_test];\n}\n\nexport function convertToTensors(x_train, x_test, y_train, y_test) {\n  const tensors = {};\n  tensors.trainFeatures = tf.tensor2d(x_train);\n  tensors.trainTargets = tf.tensor2d(y_train);\n  tensors.testFeatures = tf.tensor2d(x_test);\n  tensors.testTargets = tf.tensor2d(y_test);\n  return tensors;\n}\n\nexport function preprocess(data, sensorConfig, modelParams) {\n  let newData = refactorRawData(data);\n  newData = preprocessRemoveEmptyAndNull(newData);\n  newData = shuffle(newData);\n  let [features, targets] = getFeatureTargetSplit(newData, sensorConfig);\n  return getTestTrainSplit(features, targets, modelParams.test_train_split);\n}\n\nexport function refactorRawData(data) {\n  let newData = [];\n  const headers = data[0];\n  data.slice(1, -1).forEach(function(values, index) {\n    let result = {};\n    headers.forEach((key, i) => (result[key] = values[i]));\n    newData.push(result);\n  });\n  return newData;\n}\n\nexport default convertToTensors;\n","import \"./App.css\";\nimport React, { useState, useEffect, useRef } from \"react\";\nimport CSVReader from \"react-csv-reader\";\nimport { AddSensor, addSensorFunc } from \"./AddSensor.js\";\n\nimport * as tf from \"@tensorflow/tfjs\";\nimport * as tfvis from \"@tensorflow/tfjs-vis\";\n\nimport { convertToTensors, getR2Score, preprocess } from \"./utils.js\";\n\n// Some default machine learning model parameters\nconst modelParams = {\n  // batch size is typically set in expontentials of 2, e.g. 32, 64, 128 etc.\n  // Higher batch size gives more precise gradient approximations, at the cost of increased computation time\n  batchSize: 128 * 2 * 2 * 2,\n  // test_train_split = 0.2 means 20% of data will be set aside for testing the model\n  test_train_split: 0.2,\n  // validation_split = 0.2 means 20% of the training data will be used for validation during model training\n  validation_split: 0.2,\n  // the (initial) learning rate of the machine learning model, determines convergence rate and accuracy\n  learningRate: 0.01,\n  // number of entire loops over the training data\n  epochs: 10\n};\n\nfunction App() {\n  // Some React state variables are used to keep track of various values\n\n  const [step, setStep] = useState(1);\n\n  const [dataPoints, setDataPoints] = useState(null);\n  const [sensorNames, setSensorNames] = useState(null);\n  const [sensorConfig, setSensorConfig] = useState(null);\n  const [R2, setR2] = useState(-1000);\n  const [hasTrained, setHasTrained] = useState(false);\n  const [isTraining, setIsTraining] = useState(false);\n  const [processedData, setProcessedData] = useState([]);\n  const [trainedModel, setTrainedModel] = useState(null);\n  const [csvError, setCsvError] = useState(false);\n  const [epochs, setEpochs] = useState(modelParams.epochs);\n  const [batchsize, setBatchsize] = useState(modelParams.batchSize);\n\n  const selectDataset = data => {\n    setDataPoints(data);\n    setSensorNames(data[0]);\n    setSensorConfig(null);\n    resetState();\n    setStep(2);\n  };\n\n  function setSensorConfigWithStateReset(args) {\n    resetState();\n    setStep(2);\n    setSensorConfig(args);\n  }\n\n  function resetState() {\n    setR2(-1000);\n    setHasTrained(false);\n    setIsTraining(false);\n    setProcessedData([]);\n    setTrainedModel(null);\n    setCsvError(false);\n    setEpochs(modelParams.epochs);\n    setBatchsize(modelParams.batchSize);\n    resetLossContainer();\n  }\n\n  function resetLossContainer() {\n    const lossContainer = document.getElementById(\"lossCanvas\");\n    while (lossContainer.firstChild) {\n      lossContainer.removeChild(lossContainer.lastChild);\n    }\n  }\n\n  // Takes as parameters training and testing features (x) and targets (y)\n  async function trainModel(x_train, x_test, y_train, y_test) {\n    setIsTraining(true);\n\n    // Converts arrays of data to tensors\n    const tensors = convertToTensors(x_train, x_test, y_train, y_test);\n\n    // Fits a machine learning model to the provided training data\n    let model = await fitModel(tensors.trainFeatures, tensors.trainTargets);\n    setTrainedModel(model);\n\n    // calculates a metric which should indicate model performance\n    setR2(\n      getR2Score(model.predict(tensors.testFeatures).arraySync(), y_test)\n        .rSquared\n    );\n\n    setHasTrained(true);\n    setIsTraining(false);\n  }\n\n  // Defines a sequential neural network model based on the provided parameters:\n  // - number of units: array of ints, number of units in each hidden layer\n  // - inputSize: number of input features, equal to the input size of the first hidden layer\n  // - outputSize: number of output features, equal to the output size of the final layer\n  // - activation: activation func used in hidden layers\n  // - outputActivation: activation func used in the output layer\n  function getSequentialModel(\n    numberOfUnits,\n    inputSize,\n    outputSize,\n    activation,\n    outputActivation\n  ) {\n    // define sequential model from tensorflow\n    const model = tf.sequential();\n\n    // add the first layer explicitly, with correct input size\n    model.add(\n      tf.layers.dense({\n        kernelRegularizer: tf.regularizers.L1L2,\n        units: numberOfUnits[0],\n        activation: activation,\n        inputShape: [inputSize]\n      })\n    );\n\n    // add remaining hidden layers with equal input and output size\n    numberOfUnits.slice(1).forEach(layerUnits => {\n      model.add(\n        tf.layers.dense({\n          kernelRegularizer: tf.regularizers.L1L2,\n          units: layerUnits,\n          activation: activation,\n          inputShape: [layerUnits]\n        })\n      );\n    });\n\n    // add output layer with correct output size\n    model.add(\n      tf.layers.dense({ units: outputSize, activation: outputActivation })\n    );\n\n    return model;\n  }\n\n  // Takes as parameters feature (x) and target (y) tensors\n  async function fitModel(xTrain, yTrain) {\n    // Define a sequential neural network model with the appropriate\n    // input, hidden and output layer dimensions, with ReLU activation\n    // internally and linear activation at the outputs\n    let model = getSequentialModel(\n      [128, 128],\n      xTrain.shape[1],\n      yTrain.shape[1],\n      \"relu\",\n      \"linear\"\n    );\n\n    // Print a model summary to console\n    model.summary();\n    // Compile the model\n    model.compile({\n      optimizer: tf.train.adam(modelParams.learningRate),\n      loss: \"meanAbsoluteError\"\n    });\n\n    // If the provided dataset has very few rows (not desirable), we would like to\n    // reduce the batch size and instead run additional epochs\n    if (modelParams.batchSize > xTrain.shape[0]) {\n      setBatchsize(32);\n      setEpochs(30);\n    }\n\n    // A callback is performanced by the model each time it finishes an epoch or a batch\n    // The callback targets a canvas element and plots the loss graphs\n    const lossContainer = document.getElementById(\"lossCanvas\");\n    const callbacks = tfvis.show.fitCallbacks(\n      lossContainer,\n      [\"loss\", \"val_loss\"],\n      {\n        callbacks: [\"onEpochEnd\", \"onBatchEnd\"]\n      }\n    );\n\n    // Fits the defined model to provided tensors\n    await model.fit(xTrain, yTrain, {\n      batchSize:\n        modelParams.batchSize > xTrain.shape[0] ? 32 : modelParams.batchSize,\n      epochs: modelParams.batchSize > xTrain.shape[0] ? 30 : modelParams.epochs,\n      validationSplit: modelParams.validation_split,\n      callbacks: callbacks\n    });\n\n    return model;\n  }\n\n  // General method which calls the previously defined functions\n  async function performModelTraining() {\n    setStep(3);\n\n    // Preprocessing is performed to remove null-values and obtain the desired data structure\n    const [x_train, x_test, y_train, y_test] = preprocess(\n      dataPoints,\n      sensorConfig,\n      modelParams\n    );\n    setProcessedData([x_train, x_test, y_train, y_test]);\n    trainModel(x_train, x_test, y_train, y_test);\n  }\n\n  // A ref is used to scroll the window downwards as the user performs actions\n  const mainRef = useRef();\n  useEffect(() => {\n    if (mainRef.current) {\n      mainRef.current.scrollIntoView({\n        behavior: \"smooth\",\n        block: \"end\",\n        inline: \"nearest\"\n      });\n    }\n  }, [step, isTraining, hasTrained, epochs, trainedModel, sensorConfig]);\n\n  return (\n    <div className=\"App\" ref={mainRef}>\n      <div className=\"step\">\n        <p style={{ marginBottom: \"20px\" }}>\n          Machine learning demo using TensorFlowJS and React\n        </p>\n        {mainTextBody()}\n      </div>\n\n      <div className=\"step\">\n        {step > 1 ? (\n          <p className=\"green\">\n            1. Upload dataset in .csv format &nbsp; &#10004;\n          </p>\n        ) : (\n          <p>1. Upload dataset in .csv format</p>\n        )}\n        <p className=\"smalltext\">\n          The first row of the file should contain the column headers. The\n          following rows should contain data values. In a program like Excel,\n          this may look something like this:\n        </p>\n        {exampleTable()}\n        <CSVReader\n          cssClass=\"react-csv-input\"\n          onFileLoaded={selectDataset}\n          onError={() => setCsvError(true)}\n        />\n        {csvError && <p>.csv upload failed, please try again</p>}\n      </div>\n\n      {step > 1 && (\n        <div className=\"step\">\n          {step > 2 ? (\n            <p className=\"green\">\n              2. Choose input and output features &nbsp; &#10004;\n            </p>\n          ) : (\n            <p>2. Choose input and output features</p>\n          )}\n          <p className=\"smalltext\">\n            Any number of input features can be used to predict any number of\n            output features. Irrelevant dataset columns, such as time or index\n            columns, may be excluded. Features with no selected value are\n            ignored. If you have provided a personal .csv file and features are\n            not listed in the \"feature names\" column as expected, the provided\n            file has the wrong formatting and cannot be used with this specific\n            application, unfortunately.\n          </p>\n          {sensorNames != null && (\n            <div>\n              <table>\n                <tbody>\n                  <tr>\n                    <th className=\"TableField\">Feature name</th>\n                    <th className=\"TableField\">Input</th>\n                    <th className=\"TableField\">Output</th>\n                    <th className=\"TableField\">Exclude</th>\n                  </tr>\n                  {sensorNames &&\n                    sensorNames.map(sensor => (\n                      <AddSensor\n                        key={sensor}\n                        sensor={sensor}\n                        func={addSensorFunc}\n                        sensorConfig={sensorConfig}\n                        setFunc={setSensorConfigWithStateReset}\n                      />\n                    ))}\n                </tbody>\n              </table>\n            </div>\n          )}\n        </div>\n      )}\n\n      {step > 1 &&\n        sensorConfig != null &&\n        sensorConfig.input.length > 0 &&\n        sensorConfig.output.length > 0 && (\n          <div className=\"step\">\n            {hasTrained ? (\n              <p className=\"green\">\n                3. Train your neural network model &nbsp; &#10004;\n              </p>\n            ) : (\n              <p>3. Train your neural network model</p>\n            )}\n            <p className=\"smalltext\">\n              By default, the defined model is a{\" \"}\n              <a\n                href=\"https://en.wikipedia.org/wiki/Artificial_neural_network#Organization\"\n                target=\"_blank\"\n                rel=\"noopener noreferrer\"\n              >\n                fully connected\n              </a>{\" \"}\n              neural network consisting of an input layer, two{\" \"}\n              <a\n                href=\"https://deepai.org/machine-learning-glossary-and-terms/hidden-layer-machine-learning\"\n                target=\"_blank\"\n                rel=\"noopener noreferrer\"\n              >\n                hidden layers\n              </a>{\" \"}\n              of 128{\" \"}\n              <a\n                href=\"https://en.wikipedia.org/wiki/Artificial_neuron\"\n                target=\"_blank\"\n                rel=\"noopener noreferrer\"\n              >\n                neurons or units\n              </a>{\" \"}\n              each, and an output layer. A{\" \"}\n              <a\n                href=\"https://en.wikipedia.org/wiki/Rectifier_(neural_networks)\"\n                target=\"_blank\"\n                rel=\"noopener noreferrer\"\n              >\n                ReLU\n              </a>{\" \"}\n              <a\n                href=\"https://en.wikipedia.org/wiki/Activation_function\"\n                target=\"_blank\"\n                rel=\"noopener noreferrer\"\n              >\n                activation function\n              </a>{\" \"}\n              is used in the hidden neurons, while a linear activation is used\n              at the output. The{\" \"}\n              <a\n                href=\"https://machinelearningmastery.com/adam-optimization-algorithm-for-deep-learning/\"\n                target=\"_blank\"\n                rel=\"noopener noreferrer\"\n              >\n                Adam optimizer\n              </a>{\" \"}\n              is used, as well as the{\" \"}\n              <a\n                href=\"https://en.wikipedia.org/wiki/Mean_absolute_error\"\n                target=\"_blank\"\n                rel=\"noopener noreferrer\"\n              >\n                mean absolute error\n              </a>{\" \"}\n              metric.\n            </p>\n            <button className=\"react-csv-input\" onClick={performModelTraining}>\n              Start model training\n            </button>\n          </div>\n        )}\n\n      <div className=\"step\" style={{ paddingTop: \"0px\" }}>\n        <div>\n          {step > 2 && (\n            <p className=\"smalltext\">\n              The model is trained for {epochs} epochs in batches of {batchsize}\n              . Epochs are the number of loops over the entirely training data.\n              Batch size is the number of dataset rows used to calculate the\n              stochastic gradient and perform weight updates. The figures below\n              are updated with the calculated training and validation error\n              metric when a batch or epoch is finished, respectively.\n            </p>\n          )}\n          <div className=\"canvases\" id=\"lossCanvas\"></div>\n        </div>\n        {hasTrained && (\n          <div>\n            <p>R-squared score: {R2.toFixed(5)}</p>\n            <p className=\"smalltext\">\n              The{\" \"}\n              <a\n                href=\"https://en.wikipedia.org/wiki/Coefficient_of_determination\"\n                target=\"_blank\"\n                rel=\"noopener noreferrer\"\n              >\n                R-squared metric\n              </a>{\" \"}\n              is a measure of how well observed outcomes are replicated by the\n              model. 1.0 means perfect replication, while anything above 0.0\n              indicates the model performed better than a mean predictor.\n            </p>\n            <button\n              className=\"buttonStyle\"\n              onClick={() => trainModel(...processedData)}\n            >\n              Retrain model\n            </button>\n\n            <div className=\"step\">\n              <p>So what now?</p>\n              <p className=\"smalltext\">\n                Good question! Usually, the trained model would be evaluated\n                based on some metrics (R-squared is one such metric), and\n                perhaps even using empirical analysis and expert knowledge. If\n                deemed suitable, the model may be used to make predictions on\n                new, future data samples. The difference between measured and\n                predicted value can be used to derive fault models, e.g.\n                indicating component health in a mechanical or industrial\n                system. Using machine learning models in practice is a large and\n                active area of research. You can read about an attempt at using\n                neural network models for condition monitoring for the oil and\n                gas industry in{\" \"}\n                <a\n                  href=\"https://github.com/hermanwh/master-thesis\"\n                  target=\"_blank\"\n                  rel=\"noopener noreferrer\"\n                >\n                  my master thesis\n                </a>\n                .\n              </p>\n            </div>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n\nfunction mainTextBody() {\n  return (\n    <p className=\"midtext\">\n      This small web application shows an entry-level example of machine\n      learning performed directly in the browser using{\" \"}\n      <a\n        href=\"https://www.tensorflow.org/js\"\n        target=\"_blank\"\n        rel=\"noopener noreferrer\"\n      >\n        TensorFlowJS\n      </a>{\" \"}\n      and{\" \"}\n      <a href=\"https://reactjs.org/\" target=\"_blank\" rel=\"noopener noreferrer\">\n        React\n      </a>\n      . A dataset in{\" \"}\n      <a\n        href=\"https://en.wikipedia.org/wiki/Comma-separated_values\"\n        target=\"_blank\"\n        rel=\"noopener noreferrer\"\n      >\n        .csv format\n      </a>{\" \"}\n      is parsed to a matrix of strings and converted to{\" \"}\n      <a\n        href=\"https://www.tensorflow.org/guide/tensor\"\n        target=\"_blank\"\n        rel=\"noopener noreferrer\"\n      >\n        tensors\n      </a>\n      . Input and output{\" \"}\n      <a\n        href=\"https://en.wikipedia.org/wiki/Feature_(machine_learning)\"\n        target=\"_blank\"\n        rel=\"noopener noreferrer\"\n      >\n        features\n      </a>{\" \"}\n      may be adjusted by the user. A{\" \"}\n      <a\n        href=\"https://en.wikipedia.org/wiki/Artificial_neural_network\"\n        target=\"_blank\"\n        rel=\"noopener noreferrer\"\n      >\n        neural network\n      </a>{\" \"}\n      model with sensible default{\" \"}\n      <a\n        href=\"https://en.wikipedia.org/wiki/Hyperparameter_(machine_learning)\"\n        target=\"_blank\"\n        rel=\"noopener noreferrer\"\n      >\n        hyperparameters\n      </a>{\" \"}\n      and structure is trained.\n      <br />\n      <br />\n      For testing, I prepared the following datasets which you are advised to\n      use:\n      <br />\n      <a\n        href=\"https://github.com/hermanwh/tfjs-example/blob/main/iris_flower_dataset_extended.csv\"\n        target=\"_blank\"\n        rel=\"noopener noreferrer\"\n      >\n        Iris flower dataset\n      </a>{\" \"}\n      (direct download link:{\" \"}\n      <a\n        href=\"https://minhaskamal.github.io/DownGit/#/home?url=https://github.com/hermanwh/tfjs-example/blob/main/iris_flower_dataset_extended.csv\"\n        target=\"_blank\"\n        rel=\"noopener noreferrer\"\n      >\n        link1\n      </a>\n      )\n      <br />\n      <a\n        href=\"https://github.com/hermanwh/tfjs-example/blob/main/mechanical_component_dataset.csv\"\n        target=\"_blank\"\n        rel=\"noopener noreferrer\"\n      >\n        Hydraulic jack system\n      </a>{\" \"}\n      (direct download link:{\" \"}\n      <a\n        href=\"https://minhaskamal.github.io/DownGit/#/home?url=https://github.com/hermanwh/tfjs-example/blob/main/mechanical_component_dataset.csv\"\n        target=\"_blank\"\n        rel=\"noopener noreferrer\"\n      >\n        link2\n      </a>\n      ).\n      <br />\n      Download links from GitHub are created using{\" \"}\n      <a\n        href=\"https://minhaskamal.github.io/DownGit\"\n        target=\"_blank\"\n        rel=\"noopener noreferrer\"\n      >\n        https://minhaskamal.github.io/DownGit\n      </a>\n      .\n      <br />\n      <br />\n      For implementation details, visit{\" \"}\n      <a\n        href=\"https://github.com/hermanwh/tfjs-example\"\n        target=\"_blank\"\n        rel=\"noopener noreferrer\"\n      >\n        the GitHub repository\n      </a>\n    </p>\n  );\n}\n\nfunction exampleTable() {\n  return (\n    <table className=\"noPad\">\n      <tbody>\n        <tr>\n          <td>sepal length</td>\n          <td>sepal width</td>\n          <td>petal length</td>\n          <td>petal width</td>\n        </tr>\n        <tr>\n          <td>5.1</td>\n          <td>3.5</td>\n          <td>1.4</td>\n          <td>0.2</td>\n        </tr>\n        <tr>\n          <td>4.9</td>\n          <td>3.0</td>\n          <td>1.3</td>\n          <td>0.3</td>\n        </tr>\n        <tr>\n          <td>....</td>\n          <td>....</td>\n          <td>....</td>\n          <td>....</td>\n        </tr>\n      </tbody>\n    </table>\n  );\n}\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}